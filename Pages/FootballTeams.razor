@page "/footballTeams"
@inject FootballTeamsService footballTeamsService
@inject ISnackbar Snackbar

<PageTitle>Football Teams</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Football Teams</MudText>
<MudText Class="mb-8">Here is the football teams from all over the world. </MudText>

@if (footballTeams == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="footballTeams" Hover="true">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<FootballTeam, object>(x=>x.FoundationYear)"><MudIcon Icon="@Icons.Material.Filled.DateRange" /> Foundation Year</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<FootballTeam, object>(x=>x.Name)"><MudIcon Icon="@Icons.Material.Filled.Man" /> Team</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<FootballTeam, object>(x=>x.City)"><MudIcon Icon="@Icons.Material.Filled.LocationCity" /> City</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<FootballTeam, object>(x=>x.Stadium)"><MudIcon Icon="@Icons.Material.Filled.Stadium" /> Stadium</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<FootballTeam, object>(x=>x.Rating)">Rating</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="FoundationYear">@context.FoundationYear?.Year</MudTd>
            <MudTd DataLabel="Team">
                <MudAvatar Elevation="6" Style="@(context.Colors != null ? $"color:{context.Colors.Split(",")[0]}; background:{context.Colors.Split(",")[1]};" : "")">@context.Name.Substring(0,1)</MudAvatar>
                @context.Name
            </MudTd>
            <MudTd DataLabel="City">@context.City</MudTd>
            <MudTd DataLabel="Stadium">@context.Stadium</MudTd>
            <MudTd>
                <MudRating DataLabel="Rating" SelectedValue="@context.Rating" Size="Size.Small" MaxValue="10" ReadOnly="true" />
            </MudTd>
            <MudTd>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => Delete(context.Name)">Delete</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <MudText Typo="Typo.h4" GutterBottom="true" Class="mt-8">Add Football Teams</MudText>
    <MudText Class="mb-8">You may add some new football teams from all over the world! </MudText>

    <EditForm Model="@model" OnValidSubmit="OnValidSubmit" Class="mt-5">
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudCard Class="pa-4">
                    <MudCardContent>
                        <MudTextField T="string" @bind-Text="model.Name" Label="Team Name" Required="true" RequiredError="Team Name is required!" />
                        <MudTextField T="string" @bind-Text="model.Stadium" Label="Stadium Name" Required="true" RequiredError="Stadium Name is required!" />
                        <MudTextField T="string" @bind-Text="model.City" Label="City" Required="true" RequiredError="City is required!" />
                        @*<MudDatePicker @bind-Date="model.FoundationYear" Label="Foundation Year" Required="true" RequiredError="Foundation Year is required!" />*@
                        <MudDatePicker Label="Foundation Year" Required="true" RequiredError="Foundation Year is required!" HelperText="@model.FoundationYear?.ToShortDateString()" @bind-Date="model.FoundationYear" OpenTo="OpenTo.Year"  FixMonth="@DateTime.Today.Month" FixDay="@DateTime.Today.Day" DateFormat="yyyy" />
                        <MudNumericField @bind-Value="model.SupporterCount" Label="Supporters Count" Required="true" RequiredError="Supporters Count is required!" />
                        <MudRating @bind-SelectedValue="model.Rating" Label="Rating" MaxValue="10" For="@(() => model.Rating)" />
                        <MudColorPicker Label="Team Color 1" @bind-Text="colorValue1" Style="@($"color: {colorValue1};")" Placeholder="Select Color" />
                        <MudColorPicker Label="Team Color 2" @bind-Text="colorValue2" Style="@($"color: {colorValue2};")" Placeholder="Select Color" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>

    <MudDivider DividerType="DividerType.Inset" Class="mt-5" />
    <MudText Class="mt-8">Supporters chart! </MudText>
    <MudPaper>
        <MudChart ChartType="ChartType.Pie" InputData="@chartData" InputLabels="@teams" Width="300px" Height="300px" />
    </MudPaper>
}

@code {
    FootballTeam model = new FootballTeam();
    public List<FootballTeam> footballTeams;
    double[] chartData;
    string[] teams;
    private string colorValue1;
    private string colorValue2;

    protected override async Task OnInitializedAsync()
    {
        footballTeams = await footballTeamsService.Get();
        DrawChart();
    }

    private void OnValidSubmit(EditContext context)
    {
        model.Colors = string.Join(",", new string[] { colorValue1, colorValue2 });
        footballTeamsService.AddFootballTeam(model);
        Snackbar.Add("The team added successfully!", Severity.Success);
        CleanUp();
        DrawChart();
        //StateHasChanged();
    }

    private void Delete(string name)
    {
        bool result;
        result = footballTeamsService.Delete(name);

        if (result)
        {
            Snackbar.Add("The team removed successfully!", Severity.Success);
        }
        else
        {
            Snackbar.Add("An error occured!", Severity.Error);
        }
    }

    private void CleanUp()
    {
        model = new FootballTeam();
        colorValue1 = "";
        colorValue2 = "";
    }

    public void DrawChart()
    {
        teams = footballTeams.Select(s => s.Name).ToArray();
        chartData = footballTeams.Select(x => Convert.ToDouble(x.SupporterCount)).ToArray();
    }
}
